Anhvu Nguyen - 603906879
Leslie Wong - 903941414

Lab 1a.

	Our read-command.c has two functions to aid the make_command_stream function.
Within our make_command_stream function, the first step is tokenizing the characters
obtained from the stream. operators are simply added to a token array with the
exception of the '&' and '|' characters. Further checks were done to seperate 'or' 
and 'pipeline' as well as 'and' and an invalid character (single ampersand). At this
point we also check to ensure the number of left and right parentheses are equal to
ensure all subshells are complete.
	The first function we added was 'partition'. This function seperates the tokens
by line. Checks for balanced subshells are also included here. The second function we
added was 'parser'. 'parser' was used to ensure each token was valid with respect to
one another. For example, a redirection must be preceded and followed by a word or 
parentheses. If there are no errors found, the 'parser' will then create a command
and feed it to 'partition'. 'partition' combines the commands into a command_stream
and feeds that back into make_command_stream.
	Testing our code with the included test files and our own, the code seems to work.
However, there might have been cases we did not thing of. If there are any problems
encountered, we will fix and add to the file.

Lab 1b.
	For this part of the lab, we implemented the execute_command function within the
execute-command.c file. We are given a command struct and an int indicating time travel
as parameters. As time travel is part of lab 1c, we did not implement this portion and
simply created and implemented normal execution within a conditional statement that
time travel is zero. To implement execution, we created a switch statement to look at
the command type. For the AND_COMMAND and the the OR_COMMAND, we execute the left command
(through recursion) to find its value. Based on the value, we then choose whether we will 
execute the right command. For the SEQUENCE_COMMAND, we would first recurse through
the left command and the the right command. For the SIMPLE_COMMAND, we first check if
the word it has exec, which we need to account for as stated by the specifications.
If we do, then we will execute the command that follows it (the next word). If not,
we will then we will simply execute the command by forking and executing there so as to
not stop the parent process from reading the shell script. This last part is the same
for the SUBSHELL_COMMAND. For the PIPE_COMMAND, we will use the pipe function to be
able to execute the left side and put it into the stdin and when we execute the right
side we will have the result from the stdout.
	While testing, we realized that there were problems within our parser from lab1a.
Within our code to test for multiple semicolons, we accidentally used && rather than ||
to check the current and next token. There were also other portions in which we had
mixed up the input and the output of the command struct. These problems have been 
rectified. Creating test cases within a mytest.sh file and comparing the results ran on
timetrash and the results ran on sh, we find the the results seem to be the same. However,
there may have been test cases that we have overlooked.

Lab 1c.
	For this part of the lab, we implemented parallelization by finding the dependecy
of each command and running independent commands concurrently. To to this however, we
changed the main.c file to be able to run time travel independently of execute_command.
This is because our algorithm utilizes the command_stream rather than just the command.
First, we got through the command stream and find the inputs and outputs of the command.
This is all put into a struct called comDep (command dependencies). With an array of these,
one comDep per command, we have an array with all the inputs and outputs of each. Then, 
we cross-reference each index of the array of dependencies in order to find out who 
they depend on. This information is also added into the struct. We also keep count of the
number of dependencies it has. Finally, we find all independent commands and run them 
concurrently using fork(). With the independent commands done, we update the dependencies
of each command and continue to run until all commands have been done.
	From our testing, we were able to run programs that are not parallelizable with the
same results as the program without parallelizing. We also tested our parallelizing with
multiple commands of sleep. These tests were successful.
